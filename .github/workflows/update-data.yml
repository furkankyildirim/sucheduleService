name: Auto Update Data

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:      # Allows manual trigger

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install axios

      - name: Check for data updates
        id: check
        run: |
          # Get current version from our index.js
          echo "::group::Getting current version"
          CURRENT_VERSION=$(grep -o "version: [0-9]\+" index.js | grep -o "[0-9]\+")
          echo "Current version: $CURRENT_VERSION"
          echo "::endgroup::"
          
          # Fetch latest version from source repository
          echo "::group::Fetching latest version"
          LATEST_FILE=$(curl -s https://api.github.com/repos/aburakayaz/suchedule/contents/ | jq -r '.[] | select(.name | startswith("data-v") and endswith(".min.json")) | .name' | sort -V | tail -n1)
          LATEST_VERSION=$(echo $LATEST_FILE | grep -o '[0-9]\+')
          echo "Latest available version: $LATEST_VERSION"
          echo "::endgroup::"
          
          if [ "$LATEST_VERSION" -gt "$CURRENT_VERSION" ]; then
            echo "::group::Downloading new data"
            curl -s -L "https://raw.githubusercontent.com/aburakayaz/suchedule/master/$LATEST_FILE" -o data.json
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "::endgroup::"
          else
            echo "No new version available"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Service Files
        if: steps.check.outputs.changes == 'true'
        run: |
          # Update version in index.js
          sed -i "s/version: [0-9]\+/version: ${{ steps.check.outputs.version }}/g" index.js
          
          # Get current term from the new data file
          TERM=$(jq -r '.term' data.json)
          # Update term in index.js
          sed -i "s/term: '[0-9]\+'/term: '$TERM'/g" index.js

      - name: Create Pull Request
        if: steps.check.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update data to v${{ steps.check.outputs.version }}"
          title: "Data Update to v${{ steps.check.outputs.version }}"
          body: |
            Automated data update
            
            - Updated data file to version ${{ steps.check.outputs.version }}
            - Updated term to match the new data file
            - Last updated: ${{ github.event.repository.updated_at }}
            
            This PR was automatically generated by GitHub Actions.
          branch: auto-update-data
          base: master
          delete-branch: true 